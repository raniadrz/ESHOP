"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.useGridInfiniteLoader = void 0;
var React = _interopRequireWildcard(require("react"));
var _xDataGrid = require("@mui/x-data-grid");
var _internals = require("@mui/x-data-grid/internals");
function _getRequireWildcardCache(e) { if ("function" != typeof WeakMap) return null; var r = new WeakMap(), t = new WeakMap(); return (_getRequireWildcardCache = function (e) { return e ? t : r; })(e); }
function _interopRequireWildcard(e, r) { if (!r && e && e.__esModule) return e; if (null === e || "object" != typeof e && "function" != typeof e) return { default: e }; var t = _getRequireWildcardCache(r); if (t && t.has(e)) return t.get(e); var n = { __proto__: null }, a = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var u in e) if ("default" !== u && Object.prototype.hasOwnProperty.call(e, u)) { var i = a ? Object.getOwnPropertyDescriptor(e, u) : null; i && (i.get || i.set) ? Object.defineProperty(n, u, i) : n[u] = e[u]; } return n.default = e, t && t.set(e, n), n; }
/**
 * @requires useGridColumns (state)
 * @requires useGridDimensions (method) - can be after
 * @requires useGridScroll (method
 */
const useGridInfiniteLoader = (apiRef, props) => {
  const visibleColumns = (0, _xDataGrid.useGridSelector)(apiRef, _xDataGrid.gridVisibleColumnDefinitionsSelector);
  const currentPage = (0, _internals.useGridVisibleRows)(apiRef, props);
  const rowsMeta = (0, _xDataGrid.useGridSelector)(apiRef, _xDataGrid.gridRowsMetaSelector);
  const contentHeight = Math.max(rowsMeta.currentPageTotalHeight, 1);
  const isInScrollBottomArea = React.useRef(false);
  const handleRowsScrollEnd = React.useCallback(scrollPosition => {
    const dimensions = apiRef.current.getRootDimensions();

    // Prevent the infite loading working in combination with lazy loading
    if (!dimensions || props.rowsLoadingMode !== 'client') {
      return;
    }
    const scrollPositionBottom = scrollPosition.top + dimensions.viewportOuterSize.height;
    const viewportPageSize = apiRef.current.getViewportPageSize();
    if (scrollPositionBottom < contentHeight - props.scrollEndThreshold) {
      isInScrollBottomArea.current = false;
    }
    if (scrollPositionBottom >= contentHeight - props.scrollEndThreshold && !isInScrollBottomArea.current) {
      const rowScrollEndParam = {
        visibleColumns,
        viewportPageSize,
        visibleRowsCount: currentPage.rows.length
      };
      apiRef.current.publishEvent('rowsScrollEnd', rowScrollEndParam);
      isInScrollBottomArea.current = true;
    }
  }, [contentHeight, props.scrollEndThreshold, props.rowsLoadingMode, visibleColumns, apiRef, currentPage.rows.length]);
  const handleGridScroll = React.useCallback(({
    left,
    top
  }) => {
    handleRowsScrollEnd({
      left,
      top
    });
  }, [handleRowsScrollEnd]);
  (0, _xDataGrid.useGridApiEventHandler)(apiRef, 'scrollPositionChange', handleGridScroll);
  (0, _xDataGrid.useGridApiOptionHandler)(apiRef, 'rowsScrollEnd', props.onRowsScrollEnd);
};
exports.useGridInfiniteLoader = useGridInfiniteLoader;