import _extends from "@babel/runtime/helpers/esm/extends";
import _objectWithoutProperties from "@babel/runtime/helpers/esm/objectWithoutProperties";
var _excluded = ["getColumnsToRender", "getRootProps"];
import * as React from 'react';
import { unstable_gridFocusColumnHeaderFilterSelector, useGridSelector, gridFilterModelSelector, unstable_gridTabIndexColumnHeaderFilterSelector, getDataGridUtilityClass } from '@mui/x-data-grid';
import { styled } from '@mui/system';
import { useGridColumnHeaders as useGridColumnHeadersCommunity, getTotalHeaderHeight, useGridPrivateApiContext, getGridFilter } from '@mui/x-data-grid/internals';
import { unstable_composeClasses as composeClasses } from '@mui/utils';
import { useGridRootProps } from '../../utils/useGridRootProps';
import { jsx as _jsx } from "react/jsx-runtime";
var useUtilityClasses = function useUtilityClasses(ownerState) {
  var classes = ownerState.classes;
  return React.useMemo(function () {
    var slots = {
      headerFilterRow: ['headerFilterRow']
    };
    return composeClasses(slots, getDataGridUtilityClass, classes);
  }, [classes]);
};
var GridHeaderFilterRow = styled('div', {
  name: 'MuiDataGrid',
  slot: 'HeaderFilterRow',
  overridesResolver: function overridesResolver(props, styles) {
    return styles.headerFilterRow;
  }
})(function () {
  return {
    display: 'flex'
  };
});
var filterItemsCache = Object.create(null);
export var useGridColumnHeaders = function useGridColumnHeaders(props) {
  var apiRef = useGridPrivateApiContext();
  var headerGroupingMaxDepth = props.headerGroupingMaxDepth,
    hasOtherElementInTabSequence = props.hasOtherElementInTabSequence;
  var columnHeaderFilterTabIndexState = useGridSelector(apiRef, unstable_gridTabIndexColumnHeaderFilterSelector);
  var _useGridColumnHeaders = useGridColumnHeadersCommunity(_extends({}, props, {
      hasOtherElementInTabSequence: hasOtherElementInTabSequence || columnHeaderFilterTabIndexState !== null
    })),
    getColumnsToRender = _useGridColumnHeaders.getColumnsToRender,
    getRootProps = _useGridColumnHeaders.getRootProps,
    otherProps = _objectWithoutProperties(_useGridColumnHeaders, _excluded);
  var headerFiltersRef = React.useRef(null);
  apiRef.current.register('private', {
    headerFiltersElementRef: headerFiltersRef
  });
  var headerFilterMenuRef = React.useRef(null);
  var rootProps = useGridRootProps();
  var classes = useUtilityClasses(rootProps);
  var disableHeaderFiltering = !rootProps.unstable_headerFilters;
  var headerHeight = Math.floor(rootProps.columnHeaderHeight * props.densityFactor);
  var filterModel = useGridSelector(apiRef, gridFilterModelSelector);
  var totalHeaderHeight = getTotalHeaderHeight(apiRef, rootProps.columnHeaderHeight) + (disableHeaderFiltering ? 0 : headerHeight);
  var columnHeaderFilterFocus = useGridSelector(apiRef, unstable_gridFocusColumnHeaderFilterSelector);
  var getFilterItem = React.useCallback(function (colDef) {
    var filterModelItem = filterModel == null ? void 0 : filterModel.items.find(function (it) {
      return it.field === colDef.field && it.operator !== 'isAnyOf';
    });
    if (filterModelItem != null) {
      // there's a valid `filterModelItem` for this column
      return filterModelItem;
    }
    var defaultCachedItem = filterItemsCache[colDef.field];
    if (defaultCachedItem != null) {
      // there's a cached `defaultItem` for this column
      return defaultCachedItem;
    }
    // there's no cached `defaultItem` for this column, let's generate one and cache it
    var defaultItem = getGridFilter(colDef);
    filterItemsCache[colDef.field] = defaultItem;
    return defaultItem;
  }, [filterModel]);
  var getColumnFilters = function getColumnFilters(params) {
    var other = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
    if (disableHeaderFiltering) {
      return null;
    }
    var columnsToRender = getColumnsToRender(params);
    if (columnsToRender == null) {
      return null;
    }
    var renderedColumns = columnsToRender.renderedColumns,
      firstColumnToRender = columnsToRender.firstColumnToRender;
    var filters = [];
    for (var i = 0; i < renderedColumns.length; i += 1) {
      var _colDef$filterOperato, _colDef$filterOperato2, _rootProps$slotProps;
      var colDef = renderedColumns[i];
      var columnIndex = firstColumnToRender + i;
      var hasFocus = (columnHeaderFilterFocus == null ? void 0 : columnHeaderFilterFocus.field) === colDef.field;
      var isFirstColumn = columnIndex === 0;
      var tabIndexField = columnHeaderFilterTabIndexState == null ? void 0 : columnHeaderFilterTabIndexState.field;
      var tabIndex = tabIndexField === colDef.field || isFirstColumn && !props.hasOtherElementInTabSequence ? 0 : -1;
      var headerClassName = typeof colDef.headerClassName === 'function' ? colDef.headerClassName({
        field: colDef.field,
        colDef: colDef
      }) : colDef.headerClassName;

      // TODO: Support for `isAnyOf` operator
      var filterOperators = (_colDef$filterOperato = (_colDef$filterOperato2 = colDef.filterOperators) == null ? void 0 : _colDef$filterOperato2.filter(function (operator) {
        return operator.value !== 'isAnyOf';
      })) != null ? _colDef$filterOperato : [];
      var item = getFilterItem(colDef);
      filters.push( /*#__PURE__*/_jsx(rootProps.slots.headerFilterCell, _extends({
        colIndex: columnIndex,
        height: headerHeight,
        width: colDef.computedWidth,
        colDef: colDef,
        hasFocus: hasFocus,
        tabIndex: tabIndex,
        headerFilterMenuRef: headerFilterMenuRef,
        headerClassName: headerClassName,
        filterOperators: filterOperators,
        "data-field": colDef.field,
        item: item
      }, (_rootProps$slotProps = rootProps.slotProps) == null ? void 0 : _rootProps$slotProps.headerFilterCell, other), "".concat(colDef.field, "-filter")));
    }
    return /*#__PURE__*/_jsx(GridHeaderFilterRow, {
      ref: headerFiltersRef,
      ownerState: rootProps,
      className: classes.headerFilterRow,
      role: "row",
      "aria-rowindex": headerGroupingMaxDepth + 2,
      children: filters
    });
  };
  var rootStyle = {
    minHeight: totalHeaderHeight,
    maxHeight: totalHeaderHeight,
    lineHeight: "".concat(headerHeight, "px")
  };
  return _extends({}, otherProps, {
    getColumnFilters: getColumnFilters,
    getRootProps: disableHeaderFiltering ? getRootProps : function () {
      var other = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
      return _extends({
        style: rootStyle
      }, other);
    }
  });
};