import _toConsumableArray from "@babel/runtime/helpers/esm/toConsumableArray";
import _classCallCheck from "@babel/runtime/helpers/esm/classCallCheck";
import _createClass from "@babel/runtime/helpers/esm/createClass";
import { GRID_ROOT_GROUP_ID } from '@mui/x-data-grid';
// Single-linked list node
var Node = /*#__PURE__*/function () {
  function Node(data, next) {
    _classCallCheck(this, Node);
    this.next = void 0;
    this.data = void 0;
    this.next = next;
    this.data = data;
  }
  _createClass(Node, [{
    key: "insertAfter",
    value: function insertAfter(list) {
      if (!list.first || !list.last) {
        return;
      }
      var next = this.next;
      this.next = list.first;
      list.last.next = next;
    }
  }]);
  return Node;
}(); // Single-linked list container
var List = /*#__PURE__*/function () {
  function List(first, last) {
    _classCallCheck(this, List);
    this.first = void 0;
    this.last = void 0;
    this.first = first;
    this.last = last;
  }
  _createClass(List, [{
    key: "data",
    value: function data() {
      var array = [];
      this.forEach(function (node) {
        array.push(node.data);
      });
      return array;
    }
  }, {
    key: "forEach",
    value: function forEach(fn) {
      var current = this.first;
      while (current !== null) {
        fn(current);
        current = current.next;
      }
    }
  }], [{
    key: "from",
    value: function from(array) {
      if (array.length === 0) {
        return new List(null, null);
      }
      var index = 0;
      var first = new Node(array[index], null);
      var current = first;
      while (index + 1 < array.length) {
        index += 1;
        var _node = new Node(array[index], null);
        current.next = _node;
        current = _node;
      }
      return new List(first, current);
    }
  }]);
  return List;
}();
export var sortRowTree = function sortRowTree(params) {
  var rowTree = params.rowTree,
    disableChildrenSorting = params.disableChildrenSorting,
    sortRowList = params.sortRowList,
    shouldRenderGroupBelowLeaves = params.shouldRenderGroupBelowLeaves;
  var sortedGroupedByParentRows = new Map();
  var sortGroup = function sortGroup(node) {
    var shouldSortGroup = !!sortRowList && (!disableChildrenSorting || node.depth === -1);
    var sortedRowIds;
    if (shouldSortGroup) {
      for (var i = 0; i < node.children.length; i += 1) {
        var childNode = rowTree[node.children[i]];
        if (childNode.type === 'group') {
          sortGroup(childNode);
        }
      }
      sortedRowIds = sortRowList(node.children.map(function (childId) {
        return rowTree[childId];
      }));
    } else if (shouldRenderGroupBelowLeaves) {
      var childrenLeaves = [];
      var childrenGroups = [];
      for (var _i = 0; _i < node.children.length; _i += 1) {
        var childId = node.children[_i];
        var _childNode = rowTree[childId];
        if (_childNode.type === 'group') {
          sortGroup(_childNode);
          childrenGroups.push(childId);
        } else if (_childNode.type === 'leaf') {
          childrenLeaves.push(childId);
        }
      }
      sortedRowIds = [].concat(childrenLeaves, childrenGroups);
    } else {
      for (var _i2 = 0; _i2 < node.children.length; _i2 += 1) {
        var _childNode2 = rowTree[node.children[_i2]];
        if (_childNode2.type === 'group') {
          sortGroup(_childNode2);
        }
      }
      sortedRowIds = _toConsumableArray(node.children);
    }
    if (node.footerId != null) {
      sortedRowIds.push(node.footerId);
    }
    sortedGroupedByParentRows.set(node.id, sortedRowIds);
  };
  sortGroup(rowTree[GRID_ROOT_GROUP_ID]);
  var rootList = List.from(sortedGroupedByParentRows.get(GRID_ROOT_GROUP_ID));
  rootList.forEach(function (node) {
    var children = sortedGroupedByParentRows.get(node.data);
    if (children != null && children.length) {
      node.insertAfter(List.from(children));
    }
  });
  return rootList.data();
};