import { gridClasses } from '@mui/x-data-grid';
import { findParentElementFromClassName } from '@mui/x-data-grid/internals';
export function getFieldFromHeaderElem(colCellEl) {
  return colCellEl.getAttribute('data-field');
}
export function findHeaderElementFromField(elem, field) {
  return elem.querySelector("[data-field=\"".concat(field, "\"]"));
}
export function findGroupHeaderElementsFromField(elem, field) {
  var _elem$querySelectorAl;
  return Array.from((_elem$querySelectorAl = elem.querySelectorAll("[data-fields*=\"|-".concat(field, "-|\"]"))) != null ? _elem$querySelectorAl : []);
}
export function findGridCellElementsFromCol(col, api) {
  var _api$virtualScrollerR, _api$virtualScrollerR2;
  var root = findParentElementFromClassName(col, gridClasses.root);
  if (!root) {
    throw new Error('MUI: The root element is not found.');
  }
  var ariaColIndex = col.getAttribute('aria-colindex');
  if (!ariaColIndex) {
    return [];
  }
  var colIndex = Number(ariaColIndex) - 1;
  var cells = [];
  if (!((_api$virtualScrollerR = api.virtualScrollerRef) != null && _api$virtualScrollerR.current)) {
    return [];
  }
  var renderedRowElements = (_api$virtualScrollerR2 = api.virtualScrollerRef) == null ? void 0 : _api$virtualScrollerR2.current.querySelectorAll(":scope > div > div > .".concat(gridClasses.row) // Use > to ignore rows from nested data grids (e.g. in detail panel)
  );
  renderedRowElements.forEach(function (rowElement) {
    var rowId = rowElement.getAttribute('data-id');
    if (!rowId) {
      return;
    }
    var columnIndex = colIndex;
    var cellColSpanInfo = api.unstable_getCellColSpanInfo(rowId, colIndex);
    if (cellColSpanInfo && cellColSpanInfo.spannedByColSpan) {
      columnIndex = cellColSpanInfo.leftVisibleCellIndex;
    }
    var cell = rowElement.querySelector("[data-colindex=\"".concat(columnIndex, "\"]"));
    if (cell) {
      cells.push(cell);
    }
  });
  return cells;
}
export function findGridHeader(api, field) {
  var _api$columnHeadersCon;
  var headers = (_api$columnHeadersCon = api.columnHeadersContainerElementRef) == null ? void 0 : _api$columnHeadersCon.current;
  if (!headers) {
    return null;
  }
  return headers.querySelector(":scope > div > div > [data-field=\"".concat(field, "\"][role=\"columnheader\"]"));
}
export function findGridCells(api, field) {
  var container = api.virtualScrollerRef.current;
  var selectorFor = function selectorFor(role) {
    return ":scope > div > div > div > [data-field=\"".concat(field, "\"][role=\"").concat(role, "\"]");
  };
  // TODO(v7): Keep only the selector for the correct role
  return Array.from(container.querySelectorAll("".concat(selectorFor('cell'), ", ").concat(selectorFor('gridcell'))));
}